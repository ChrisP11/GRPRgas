"""
Django settings for portfolio project.

Generated by 'django-admin startproject' using Django 4.2.16.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os
import dj_database_url

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# static file settings
# Development: Static files are served from GRPR/GRPR/static/css/styles.css.
# Production: Static files are collected into GRPR/GRPR/staticfiles and served from there.
STATIC_URL = '/static/' 
STATICFILES_DIRS = [BASE_DIR / "GRPR/static"]
STATIC_ROOT = BASE_DIR / "staticfiles" # added as part of port to Postgres


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/
# Set DEBUG to False for production
# DEBUG = False
DEBUG = True

# SECURITY WARNING: keep the secret key used in production secret!

# Security settings
SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY', 'your_secret_key')
# print(f"SECRET_KEY: {SECRET_KEY}")
# SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY')


# Allow all host headers
ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # my apps
    'GRPR',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware', # added as part of port to Postgres
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'portfolio.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'GRPR/templates/GRPR'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'portfolio.wsgi.application'


## Database config for SQLite   # https://docs.djangoproject.com/en/4.2/ref/settings/#databases
# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }

# Database configuration for PostgreSQL
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'grpr_db',
        'USER': os.getenv('POSTGRES_USER'),
        'PASSWORD': os.getenv('POSTGRES_PASSWORD'), 
        'HOST': 'localhost',
        'PORT': '',
    }
}

# Database configuration for PostgreSQL
# DATABASES = {
#     'default': dj_database_url.config(conn_max_age=600, ssl_require=True)
# }


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# added this section as part of creating the secure login page for grpr
AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
]

# Redirect users to the home page after login
LOGIN_REDIRECT_URL = '/home/'

# Redirect users to the login page if not authenticated
LOGIN_URL = '/login/'

# Redirect users to the login page after logout
LOGOUT_REDIRECT_URL = '/login/'

# Session settings, recommended settings
SESSION_COOKIE_AGE = 3600  # Set session duration to 1 hour (3600 seconds), default is 2 weeks, comment out this line to revert to that timeframe
SESSION_EXPIRE_AT_BROWSER_CLOSE = True  # Expire session when the browser is closed
SESSION_COOKIE_SECURE = True  # Ensure session cookies are only sent over HTTPS
SESSION_COOKIE_HTTPONLY = True  # Ensure session cookies are inaccessible to JavaScript
SESSION_COOKIE_SAMESITE = 'Lax'  # Set the SameSite attribute for session cookies


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

# Set the time zone to Central Standard Time (CST)
TIME_ZONE = 'America/Chicago'

USE_I18N = True

# Use timezone-aware datetimes
USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/



# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# Add this setting to control Twilio functionality
# TWILIO_ENABLED = True
TWILIO_ENABLED = False

# Twilio credentials
TWILIO_ACCOUNT_SID = os.getenv('TWILIO_ACCOUNT_SID')
TWILIO_AUTH_TOKEN = os.getenv('TWILIO_AUTH_TOKEN')

# Email backend configuration
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD')

# Default from email address
DEFAULT_FROM_EMAIL = os.environ.get('EMAIL_HOST_USER')